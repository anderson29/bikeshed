#!/bin/sh -e
#
#    cloud-tunnel - encrypt and tunnel web traffic through
#                   a public cloud instance
#
#    Copyright (C) 2010 Dustin Kirkland <kirkland@ubuntu.com>
#
#    Authors:
#        Dustin Kirkland <kirkland@ubuntu.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

error() {
	echo "ERROR: $@" 1>&2
	exit 1
}

info() {
	echo "INFO: $@"
}

get_pid() {
	_RET=$(pgrep -f "${SSH_TUNNEL_NAME}" -U "${UID}")
}

Usage() {
	cat <<EOF
${PROG}: [ options ] command

    manage a socks/ssh tunnel to an ec2 instance

    command is one of 'start', 'stop', or 'status'
    options:
       -h | --help      show this message
EOF
}

PROG=$(basename "$0")
EC2PRE=${EC2PRE:-ec2-}
USER="ubuntu"
UID=$(id -u)
SSH_TUNNEL_NAME="${PROG}-ssh"
SSH_OPTS="-f -N -C -D"
SOCKS=$(awk 'BEGIN {srand(); printf "%d\n", (rand()*10000+10000)}' < /dev/null)

[ $# -eq 0 ] && { Usage 1>&2; exit 1; }
[ "$1" = "--help" -o "$1" = "-h" ] && { Usage; exit 0; }

case $1 in
	start)
		get_pid &&
			error "${PROG} is already running as ${_RET}. please stop first"

		info "Looking for running cloud instances..."
		hostname=$(${EC2PRE}describe-instances  | awk '-F\t' '$6 == "running" { print $4; exit(0); }')
		[ -z "$hostname" ] && error "No running instances found -- try starting a cloud instance"
		info "Selecting instance [$hostname]..."
		info "Configuring gnome..."
		gconftool-2 -t string -s /system/proxy/mode "auto" \
			-t string -s /system/proxy/socks_host "localhost" \
			-t string -s /system/proxy/socks_port "$SOCKS"
		# BUG: This is a nasty dirty hack, but a bug in chromium prevents it
		#      from re-reading socks proxy information from gconf.
		for i in $(find "$HOME/.config/chromium" -type f -name "*.pac"); do
			sed -i "s/'SOCKS5 localhost:.*'/'SOCKS5 localhost:$SOCKS'/" "$i"
		done
		info "Establishing tunnel on port [$SOCKS]..."
		info "You may need to restart your browser(s)..."
		SSH_TUNNEL_NAME="${SSH_TUNNEL_NAME}" \
			bash -c 'exec -a ${SSH_TUNNEL_NAME} -- "$@"' arg0 \
			ssh $SSH_OPTS "$SOCKS" "$USER@$hostname"
		[ $? -eq 0 ] || error "connection ssh failed"
	;;
	stop)
		info "De-configuring gnome..."
		gconftool-2 -t string -s /system/proxy/mode "none"
		info "Terminating tunnel..."
		# BUG: Ideally, we'd save the pid of the ssh process and kill that here.
		#      For now, kill any/all tunnels to AWS.
		pkill -f "${SSH_TUNNEL_NAME}" -U "${UID}"
		info "You may need to restart your browser(s)..."
	;;
	status)
		if get_pid; then
			echo "$PROG is running [${_RET}]"
			exit 0
		else
			echo "$PROG is not running"
			exit 1
		fi
 	;;
 	*)
 		error "Unknown parameter"
	;;
esac

exit 0

# vi: ts=4 noexpandtab
